module.exports=function(e,r){"use strict";var t={};function __webpack_require__(r){if(t[r]){return t[r].exports}var u=t[r]={i:r,l:false,exports:{}};var s=true;try{e[r].call(u.exports,u,u.exports,__webpack_require__);s=false}finally{if(s)delete t[r]}u.l=true;return u.exports}__webpack_require__.ab=__dirname+"/";function startup(){return __webpack_require__(198)}return startup()}({198:function(){define("domain/error/BaseError",["require","exports"],function(e,r){"use strict";Object.defineProperty(r,"__esModule",{value:true});r.BaseError=void 0;class BaseError extends Error{constructor(e){super(e);this.name=new.target.name}}r.BaseError=BaseError});define("domain/error/BranchIssueNumNotFound",["require","exports","domain/error/BaseError"],function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:true});r.BranchIssueNumNotFound=void 0;class BranchIssueNumNotFound extends t.BaseError{constructor(e){super(e)}}r.BranchIssueNumNotFound=BranchIssueNumNotFound});define("domain/PullRequest",["require","exports"],function(e,r){"use strict";Object.defineProperty(r,"__esModule",{value:true});r.PullRequest=void 0;class PullRequest{constructor(e,r,t,u,s){this.addRelatedIssueNumberToBody=(e=>this.addIntoTopOfBody(`# Issue\n- Resolve #${e}`));this.addIntoTopOfBody=(e=>this.updateBody(`${e}\n${this.body}`));this.updateBody=(e=>{this.body=e;return this});this.title=e;this.body=r;this.number=t;this.owner=u;this.repo=s}}r.PullRequest=PullRequest});define("application/repository/PullRequestRepository",["require","exports"],function(e,r){"use strict";Object.defineProperty(r,"__esModule",{value:true})});define("infrastructure/datastore/PullRequestDataStore",["require","exports","domain/PullRequest"],function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:true});r.PullRequestDataStore=void 0;class PullRequestDataStore{constructor(e){this.update=(async e=>this.client.update({body:e.body,pull_number:e.number,owner:e.owner,repo:e.repo}));this.get=(async(e,r,u)=>{const s=(await this.client.get({pull_number:e,owner:r,repo:u})).data;return new t.PullRequest(s.title,s.body,s.number,r,u)});this.client=e.pulls}}r.PullRequestDataStore=PullRequestDataStore});define("application/service/PullRequestRecordService",["require","exports"],function(e,r){"use strict";Object.defineProperty(r,"__esModule",{value:true});r.PullRequestRecordService=void 0;class PullRequestRecordService{constructor(e){this.pullRequestRepository=e;this.addRelatedIssueNumberToBody=(async(e,r)=>{const{repo:t,issue:u}=r;const s=await this.pullRequestRepository.get(u.number,t.owner,t.repo);return await this.pullRequestRepository.update(s.addRelatedIssueNumberToBody(e))})}}r.PullRequestRecordService=PullRequestRecordService});define("domain/Branch",["require","exports","domain/error/BranchIssueNumNotFound"],function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:true});r.Branch=void 0;class Branch{constructor(e){this.branchName=e}getIssueNumber(e){const r=new RegExp(`${e}([0-9]+)`);const u=this.branchName.match(r);if(!u)throw new t.BranchIssueNumNotFound("Skiped process to add an issue reference to a pull request.");return parseInt(u[1])}}r.Branch=Branch});define("application/service/BranchQueryService",["require","exports","domain/Branch"],function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:true});r.BranchQueryService=void 0;class BranchQueryService{constructor(e){this.context=e;this.getBranch=(()=>{var e;const r=(e=this.context.payload.pull_request)===null||e===void 0?void 0:e.head.ref;return new t.Branch(r)})}}r.BranchQueryService=BranchQueryService});define("main",["require","exports","@actions/core","@actions/github","domain/error/BranchIssueNumNotFound","infrastructure/datastore/PullRequestDataStore","application/service/PullRequestRecordService","application/service/BranchQueryService"],function(e,r,t,u,s,o,n,i){"use strict";Object.defineProperty(r,"__esModule",{value:true});async function run(){try{const e={token:t.getInput("repo-token",{required:true}),branchPrefix:t.getInput("branch-prefix",{required:true})};const r=new i.BranchQueryService(u.context).getBranch().getIssueNumber(e.branchPrefix);const a=await new n.PullRequestRecordService(new o.PullRequestDataStore(new u.GitHub(e.token))).addRelatedIssueNumberToBody(r,u.context);t.info(`Added issue #${r} reference to pull request #${a.data.number}.\n${a.data.html_url}`)}catch(e){if(e instanceof s.BranchIssueNumNotFound)return t.info(e.message);t.setFailed(e.message)}}run()})}});
